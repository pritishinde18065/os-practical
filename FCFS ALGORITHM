


#include <iostream>
#include <iomanip>
using namespace std;
int main() {
int n;
cout << "Enter the number of processes: ";
cin >> n;
int processes[n], burstTime[n], arrivalTime[n];
int waitingTime[n], turnaroundTime[n];
float avgWaitTime = 0, avgTurnaroundTime = 0;
// Input process details
for (int i = 0; i < n; i++) {
processes[i] = i + 1;
cout << "Enter arrival time for Process " << i + 1 << ": ";
cin >> arrivalTime[i];
cout << "Enter burst time for Process " << i + 1 << ": ";
cin >> burstTime[i];
}
// Sort processes by arrival time
for (int i = 0; i < n - 1; i++) {
for (int j = 0; j < n - i - 1; j++) {
if (arrivalTime[j] > arrivalTime[j + 1]) {
swap(arrivalTime[j], arrivalTime[j + 1]);
swap(burstTime[j], burstTime[j + 1]);
swap(processes[j], processes[j + 1]);
}
}
}
// Calculate waiting and turnaround times
int completionTime[n];
completionTime[0] = arrivalTime[0] + burstTime[0];
waitingTime[0] = 0; // First process has no waiting time
turnaroundTime[0] = burstTime[0];
for (int i = 1; i < n; i++) {
completionTime[i] = max(completionTime[i - 1], arrivalTime[i]) + burstTime[i];
turnaroundTime[i] = completionTime[i] - arrivalTime[i];
waitingTime[i] = turnaroundTime[i] - burstTime[i];
}
// Print Gantt chart
cout << "\nGantt Chart:\n";
for (int i = 0; i < n; i++) {
cout << "| P" << processes[i] << " ";
}
cout << "|\n";
for (int i = 0; i < n; i++) {
cout << completionTime[i] - burstTime[i] << " ";
}
cout << completionTime[n - 1] << "\n";
// Display process details
cout << "\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n";
for (int i = 0; i < n; i++) {
cout << "P" << processes[i] << "\t\t"
<< arrivalTime[i] << "\t\t\t\t"
<< burstTime[i] << "\t\t\t"
<< waitingTime[i] << "\t\t\t\t"
<< turnaroundTime[i] << "\n";
avgWaitTime += waitingTime[i];
avgTurnaroundTime += turnaroundTime[i];
}
// Calculate and display averages
avgWaitTime /= n;
avgTurnaroundTime /= n;
cout << "\nAverage Waiting Time: " << fixed << setprecision(2) << avgWaitTime << "\n";
cout << "Average Turnaround Time: " << fixed << setprecision(2) << avgTurnaroundTime <<
"\n";
return 0;
}
