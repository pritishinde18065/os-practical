#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>
using namespace std;

struct Process {
    int pid, arrival_time, burst_time, remaining_time, priority;
    int waiting_time, turnaround_time;
};

bool compareArrivalTime(Process &p1, Process &p2) {
    return p1.arrival_time < p2.arrival_time;
}

bool comparePriority(Process &p1, Process &p2) {
    return p1.priority > p2.priority; // Higher priority first
}

int main() {
    int n, quantum;
    // Input number of processes and time quantum
    cout << "Enter the number of processes: ";
    cin >> n;
    cout << "Enter the time quantum: ";
    cin >> quantum;
    
    vector<Process> processes(n);

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        cout << "Enter arrival time for Process " << i + 1 << ": ";
        cin >> processes[i].arrival_time;
        cout << "Enter burst time for Process " << i + 1 << ": ";
        cin >> processes[i].burst_time;
        cout << "Enter priority for Process " << i + 1 << " (higher number indicates higher priority): ";
        cin >> processes[i].priority;
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].waiting_time = 0;
        processes[i].turnaround_time = 0;
    }

    // Sort processes based on arrival time and priority
    sort(processes.begin(), processes.end(), compareArrivalTime);

    int total_time = 0;
    int completed = 0;
    vector<int> gantt_chart;

    // Non-preemptive Priority Round Robin scheduling
    while (completed < n) {
        bool all_done = true;
        int highest_priority_index = -1;
        int highest_priority = -1;

        // Find the process with the highest priority that is ready to execute
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0 && processes[i].arrival_time <= total_time) {
                all_done = false;
                if (processes[i].priority > highest_priority) {
                    highest_priority = processes[i].priority;
                    highest_priority_index = i;
                }
            }
        }

        if (!all_done) {
            // If a process is selected, simulate its execution
            int time_slice = min(quantum, processes[highest_priority_index].remaining_time);

            // Store the process in the gantt chart for each time slice
            for (int i = 0; i < time_slice; i++) {
                gantt_chart.push_back(processes[highest_priority_index].pid);
            }

            // Update process details
            processes[highest_priority_index].remaining_time -= time_slice;
            total_time += time_slice;

            // If the process is completed
            if (processes[highest_priority_index].remaining_time == 0) {
                processes[highest_priority_index].turnaround_time = total_time - processes[highest_priority_index].arrival_time;
                processes[highest_priority_index].waiting_time = processes[highest_priority_index].turnaround_time - processes[highest_priority_index].burst_time;
                completed++;
            }
        }

        if (all_done) {
            break;
        }
    }

    // Display the Gantt Chart
    cout << "\nGantt Chart:\n";
    for (int i = 0; i < gantt_chart.size(); i++) {
        cout << "| P" << gantt_chart[i] << " ";
    }
    cout << "|";
    cout << "\n";

    // Display the process details in a table-like format
    cout << "\nProcess Arrival Time Burst Time Priority Waiting Time Turnaround Time\n";
    for (int i = 0; i < n; i++) {
        cout << "P" << processes[i].pid << "\t"
            << processes[i].arrival_time << "\t\t"
            << processes[i].burst_time << "\t\t"
            << processes[i].priority << "\t\t"
            << processes[i].waiting_time << "\t\t\t"
            << processes[i].turnaround_time << endl;
    }

    // Calculate and display averages
    int total_waiting_time = 0, total_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    // Output the averages using fixed and setprecision for better formatting
    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    cout << "\nAverage Waiting Time: " << fixed << setprecision(2) << avg_waiting_time << endl;
    cout << "Average Turnaround Time: " << fixed << setprecision(2) << avg_turnaround_time << endl;

    return 0;
}

