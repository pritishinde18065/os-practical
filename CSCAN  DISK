#include <iostream>
#include <algorithm> // for sort()
#include <cmath>     // for abs()
using namespace std;

void C_SCAN(int requests[], int n, int start, int disk_size, string direction) {
    int total_seek_time = 0;
    int current_position = start;

    // Sort the requests in ascending order
    sort(requests, requests + n);

    cout << "Initial head position: " << start << endl;
    cout << "Head movement: ";

    if (direction == "right") {
        // Process requests to the right of the start position
        for (int i = 0; i < n; i++) {
            if (requests[i] >= current_position) {
                total_seek_time += abs(requests[i] - current_position);
                cout << current_position << " -> " << requests[i] << " ";
                current_position = requests[i];
            }
        }

        // Move to the end of the disk
        if (current_position != disk_size - 1) {
            total_seek_time += abs(disk_size - 1 - current_position);
            cout << current_position << " -> " << disk_size - 1 << " ";
        }

        // Wrap around to the beginning of the disk
        total_seek_time += disk_size - 1; // From last position to 0
        cout << disk_size - 1 << " -> 0 ";

        current_position = 0;

        // Process remaining requests to the left of the start position
        for (int i = 0; i < n; i++) {
            if (requests[i] < start) {
                total_seek_time += abs(current_position - requests[i]);
                cout << current_position << " -> " << requests[i] << " ";
                current_position = requests[i];
            }
        }
    } else if (direction == "left") {
        // Process requests to the left of the start position
        for (int i = n - 1; i >= 0; i--) {
            if (requests[i] <= current_position) {
                total_seek_time += abs(current_position - requests[i]);
                cout << current_position << " -> " << requests[i] << " ";
                current_position = requests[i];
            }
        }

        // Move to the start of the disk
        if (current_position != 0) {
            total_seek_time += abs(current_position - 0);
            cout << current_position << " -> 0 ";
        }

        // Wrap around to the end of the disk
        total_seek_time += disk_size - 1; // From 0 to the last position
        cout << "0 -> " << disk_size - 1 << " ";

        current_position = disk_size - 1;

        // Process remaining requests to the right of the start position
        for (int i = n - 1; i >= 0; i--) {
            if (requests[i] > start) {
                total_seek_time += abs(current_position - requests[i]);
                cout << current_position << " -> " << requests[i] << " ";
                current_position = requests[i];
            }
        }
    }

    cout << endl;
    cout << "Total seek time: " << total_seek_time << endl;
    cout << "Average seek time: " << (float)total_seek_time / n << endl;
}

int main() {
    int n, start, disk_size;
    string direction;

    // Input number of requests
    cout << "Enter number of disk requests: ";
    cin >> n;

    int requests[n]; // Array to store disk requests

    // Input disk requests
    cout << "Enter disk requests: ";
    for (int i = 0; i < n; i++) {
        cin >> requests[i];
    }

    // Input starting head position
    cout << "Enter initial position of the disk arm: ";
    cin >> start;

    // Input disk size
    cout << "Enter total disk size (max position): ";
    cin >> disk_size;

    // Input initial direction of head movement
    cout << "Enter initial direction (left/right): ";
    cin >> direction;

    // Call C-SCAN function
    C_SCAN(requests, n, start, disk_size, direction);

    return 0;
}
